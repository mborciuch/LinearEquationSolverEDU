<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="StudySettings">
    <StudyTaskManager>
      <option name="VERSION" value="16" />
      <option name="myUserTests">
        <map />
      </option>
      <option name="course">
        <HyperskillCourse>
          <option name="authors">
            <list />
          </option>
          <option name="courseMode" value="Study" />
          <option name="customPresentableName" />
          <option name="description" value="You’ve come so far, {username}! Yet sometimes it’s nice to get back to old and simple basics: shall we remember some linear algebra? In this project, you will write a program that solves linear equations (you wish you had it back at school, don’t you?) It won’t be working with powers and radicals, but on the other hand, it will be able to handle matrices and complex numbers.&lt;br/&gt;&lt;br/&gt;Learn more at &lt;a href=&quot;https://hyperskill.org&quot;&gt;https://hyperskill.org/projects/40&lt;/a&gt;" />
          <option name="environment" value="" />
          <option name="id" value="0" />
          <option name="index" value="-1" />
          <option name="language" value="JAVA 11" />
          <option name="languageCode" value="en" />
          <option name="name" value="Linear Equations Solver (Java)" />
          <option name="stages">
            <list>
              <HyperskillStage>
                <option name="id" value="209" />
                <option name="stepId" value="5305" />
                <option name="title" value="Simple and real" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="210" />
                <option name="stepId" value="5306" />
                <option name="title" value="X and Y" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="211" />
                <option name="stepId" value="5307" />
                <option name="title" value="Equations" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="212" />
                <option name="stepId" value="5308" />
                <option name="title" value="When things get complicated" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="213" />
                <option name="stepId" value="5309" />
                <option name="title" value="Complex numbers" />
              </HyperskillStage>
            </list>
          </option>
          <option name="taskToTopics">
            <map>
              <entry key="0">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="480" />
                      <option name="theoryId" value="6577" />
                      <option name="title" value="Command line overview" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="259" />
                      <option name="theoryId" value="3805" />
                      <option name="title" value="IDE" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="15" />
                      <option name="theoryId" value="3500" />
                      <option name="title" value="Introduction to Java" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="147" />
                      <option name="theoryId" value="3522" />
                      <option name="title" value="Basic literals" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="148" />
                      <option name="theoryId" value="3521" />
                      <option name="title" value="The first program" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="193" />
                      <option name="theoryId" value="3749" />
                      <option name="title" value="Printing data" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="14" />
                      <option name="theoryId" value="3518" />
                      <option name="title" value="Types and variables" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="30" />
                      <option name="theoryId" value="3520" />
                      <option name="title" value="Comments" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="112" />
                      <option name="theoryId" value="3513" />
                      <option name="title" value="Naming variables" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="1">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="117" />
                      <option name="theoryId" value="3614" />
                      <option name="title" value="Introduction to OOP" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="307" />
                      <option name="theoryId" value="5008" />
                      <option name="title" value="Increment and decrement" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="31" />
                      <option name="theoryId" value="3514" />
                      <option name="title" value="Characters" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="9" />
                      <option name="theoryId" value="3523" />
                      <option name="title" value="String" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="115" />
                      <option name="theoryId" value="3618" />
                      <option name="title" value="Defining classes" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="2">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="60" />
                      <option name="theoryId" value="3497" />
                      <option name="title" value="What is an exception" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="59" />
                      <option name="theoryId" value="3570" />
                      <option name="title" value="Hierarchy of exceptions" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="65" />
                      <option name="theoryId" value="3552" />
                      <option name="title" value="Exception handling" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="172" />
                      <option name="theoryId" value="3635" />
                      <option name="title" value="Files" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="173" />
                      <option name="theoryId" value="3636" />
                      <option name="title" value="Reading files" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="177" />
                      <option name="theoryId" value="3652" />
                      <option name="title" value="Writing files" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="161" />
                      <option name="theoryId" value="3532" />
                      <option name="title" value="Sizes and ranges" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="32" />
                      <option name="theoryId" value="3510" />
                      <option name="title" value="Type casting" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="3">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="157" />
                      <option name="theoryId" value="3611" />
                      <option name="title" value="The concept of patterns" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="316" />
                      <option name="theoryId" value="5096" />
                      <option name="title" value="Command" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="38" />
                      <option name="theoryId" value="3534" />
                      <option name="title" value="Static members" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="4">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="167" />
                      <option name="theoryId" value="3492" />
                      <option name="title" value="Generic programming" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="168" />
                      <option name="theoryId" value="3493" />
                      <option name="title" value="Generics and Object" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="37" />
                      <option name="theoryId" value="3525" />
                      <option name="title" value="Overloading" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="6" />
                      <option name="theoryId" value="3595" />
                      <option name="title" value="Boxing &amp;&amp; unboxing" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="120" />
                      <option name="theoryId" value="3538" />
                      <option name="title" value="Multiple constructors" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="127" />
                      <option name="theoryId" value="3588" />
                      <option name="title" value="The keyword super" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="5" />
                      <option name="theoryId" value="3572" />
                      <option name="title" value="Hiding and overriding" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="491" />
                      <option name="theoryId" value="6692" />
                      <option name="title" value="Protected modifier" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="128" />
                      <option name="theoryId" value="3585" />
                      <option name="title" value="Referencing subclass objects" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="22" />
                      <option name="theoryId" value="3596" />
                      <option name="title" value="The Object class" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="119" />
                      <option name="theoryId" value="3584" />
                      <option name="title" value="toString()" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
            </map>
          </option>
          <option name="updateDate" value="0" />
          <option name="hyperskillProject">
            <HyperskillProject>
              <option name="description" value="You’ve come so far, {username}! Yet sometimes it’s nice to get back to old and simple basics: shall we remember some linear algebra? In this project, you will write a program that solves linear equations (you wish you had it back at school, don’t you?) It won’t be working with powers and radicals, but on the other hand, it will be able to handle matrices and complex numbers." />
              <option name="id" value="40" />
              <option name="ideFiles" value="https://stepik.org/media/attachments/lesson/203891/additional_files.json" />
              <option name="language" value="java" />
              <option name="title" value="Linear Equations Solver (Java)" />
              <option name="useIde" value="true" />
            </HyperskillProject>
          </option>
          <option name="items">
            <list>
              <FrameworkLesson>
                <option name="currentTaskIndex" value="3" />
                <option name="customPresentableName" />
                <option name="id" value="0" />
                <option name="index" value="1" />
                <option name="name" value="Linear Equations Solver (Java)" />
                <option name="updateDate" value="0" />
                <option name="unitId" value="0" />
                <option name="items">
                  <list>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;A linear equation is called linear because it doesn't consist of variables with powers - only with variables with power 1. Linear equations can be found in different fields of science and technology. For the simplest examples, see &lt;a href=&quot;https://sciencing.com/linear-equations-used-everyday-life-6022370.html&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;this&lt;/a&gt; link. In this project, you will write a lot more powerful solver, but in this stage, you will write such a simple one.&lt;/p&gt;&#10;&#10;&lt;p&gt;Write a program that solves the equation a * x = b.&lt;/p&gt;&#10;&#10;&lt;p&gt;Numbers a and b should be read from the first line of the standard input. You should output the value x, which turns the equation to be true. For example, if the input contains numbers 5 and 3, this means that you should interpret this as equation 5 * x = 3. For this example, the answer would be 0.6 since 5 * 0.6 = 3.&lt;/p&gt;&#10;&#10;&lt;h2&gt;Output example&lt;/h2&gt;&#10;&#10;&lt;p&gt;Input:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;5 3&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;Output:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;0.6&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt; &lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/40/stages/209/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5305" />
                      <option name="index" value="1" />
                      <option name="name" value="Simple and real" />
                      <option name="record" value="1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/solver/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/solver/Main.java" />
                                <option name="text" value="package solver;&#10;&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        System.out.println(&quot;Hello World!&quot;);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/SolverTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/SolverTest.java" />
                                <option name="text" value="import org.hyperskill.hstest.v5.testcase.CheckResult;&#10;import org.hyperskill.hstest.v5.stage.BaseStageTest;&#10;import org.hyperskill.hstest.v5.testcase.TestCase;&#10;&#10;import solver.Main;&#10;&#10;import java.util.List;&#10;&#10;import static java.lang.Math.abs;&#10;&#10;&#10;public class SolverTest extends BaseStageTest&lt;String&gt; {&#10;&#10;    public SolverTest() throws Exception {&#10;        super(Main.class);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;TestCase&lt;String&gt;&gt; generate() {&#10;        List&lt;TestCase&lt;String&gt;&gt; tests = List.of(&#10;            new TestCase&lt;String&gt;().setInput(&quot;5 3&quot;),&#10;            new TestCase&lt;String&gt;().setInput(&quot;12 67&quot;),&#10;            new TestCase&lt;String&gt;().setInput(&quot;12 12&quot;),&#10;            new TestCase&lt;String&gt;().setInput(&quot;-1 1&quot;),&#10;            new TestCase&lt;String&gt;().setInput(&quot;2 -3&quot;),&#10;            new TestCase&lt;String&gt;().setInput(&quot;2.34 12.23&quot;)&#10;        );&#10;&#10;        for (TestCase&lt;String&gt; test : tests) {&#10;            test.setAttach(solve(test.getInput()));&#10;        }&#10;&#10;        return tests;&#10;    }&#10;&#10;    private String solve(String input) {&#10;        String[] nums = input.split(&quot; &quot;);&#10;        double a = Double.parseDouble(nums[0]);&#10;        double b = Double.parseDouble(nums[1]);&#10;        return String.valueOf(b / a);&#10;    }&#10;&#10;    @Override&#10;    public CheckResult check(String reply, String clue) {&#10;        try {&#10;            double actual = Double.parseDouble(reply);&#10;            double expected = Double.parseDouble(clue);&#10;            return new CheckResult(abs(actual - expected) &lt; 0.001);&#10;        }&#10;        catch (NumberFormatException ex) {&#10;            return new CheckResult(false, &quot;Can't parse numbers - check if you don't print any additional symbols except a space between the numbers&quot;);&#10;        }&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1561924688000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;Let's solve the problem with one additional variable and one additional equation. The variables would be x and y. The general form of this equation look like this:&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;65&quot; src=&quot;https://ucarecdn.com/b81bbe09-cf30-4078-9b17-c5d6216b6cf0/&quot; width=&quot;151&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;Where a, b, c, d, e, f are numbers. The general algorithm is to separate the variables so the first variable would be solved on the first line and the second variable would be solved on the second line.&lt;/p&gt;&#10;&#10;&lt;p&gt;The main concept here is to subtract rows. You already know how to subtract numbers and subtraction of rows is not much different. Below is an example in which we subtract the first row from the second one.&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;54&quot; src=&quot;https://ucarecdn.com/e2cdd775-1710-4b4e-967f-b0f76d613917/&quot; width=&quot;307&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;As you can see, we subtract ax+by from the right side of the second equation and also subtract c from the right side of an equation. Since we subtracted the equal amounts from both sides, the equation stays correct. You also can simplify this as shown below:&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;52&quot; src=&quot;https://ucarecdn.com/4cf4fad5-ade6-4df5-b1ee-21bde7a456b2/&quot; width=&quot;267&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;But the real usefulness becomes after you realize that you can subtract only a part of an equation. Let's subtract from the second equation the first equation multiplied by d / a.&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;54&quot; src=&quot;https://ucarecdn.com/be4cefbf-ab74-4820-9dfb-d2b28a0fc8ae/&quot; width=&quot;411&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;Notice that d - a *d / a becomes d - d and becomes 0. Therefore, we can exclude x from the second equation.&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;53&quot; src=&quot;https://ucarecdn.com/93c3e634-daf1-4dc5-990e-2b087d1b845a/&quot; width=&quot;262&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;And there we can find the y value. Just divide both sides by e - b * d / a.&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;76&quot; src=&quot;https://ucarecdn.com/607ed152-cbd4-4953-aef2-d100cb605877/&quot; width=&quot;164&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;Now, you can find the x value from the first equation since you know the y value. This is a similar problem like in the previous stage.&lt;/p&gt;&#10;&#10;&lt;p&gt;The first line of the input contains numbers a, b, c. The second line of the input contains numbers d, e, f. All 6 numbers are doubles. You should output the solution - x and y in a single line.&lt;/p&gt;&#10;&#10;&lt;p&gt;You can use &lt;a href=&quot;https://www.wolframalpha.com/input/?i=4x%2B5y%3D7+and+3x%2B9y%3D9&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;this&lt;/a&gt; link to check if your solution is right. For the approximate form without fractions, click the &quot;Approximate form&quot; button.&lt;/p&gt;&#10;&#10;&lt;h2&gt;Output example&lt;/h2&gt;&#10;&#10;&lt;p&gt;Input 1:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;4 5 7&#10;3 9 9&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;Output 1:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;0.85714 0.71429&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;Input 2:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;1 2 3&#10;4 5 6&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;Output 2:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;-1.0 2.0&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt; &lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/40/stages/210/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5306" />
                      <option name="index" value="2" />
                      <option name="name" value="X and Y" />
                      <option name="record" value="2" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="test/SolverTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/SolverTest.java" />
                                <option name="text" value="import org.hyperskill.hstest.v5.testcase.CheckResult;&#10;import org.hyperskill.hstest.v5.stage.BaseStageTest;&#10;import org.hyperskill.hstest.v5.testcase.TestCase;&#10;import solver.Main;&#10;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;import java.util.Scanner;&#10;&#10;import static java.lang.Math.abs;&#10;&#10;&#10;public class SolverTest extends BaseStageTest&lt;String&gt; {&#10;&#10;    public SolverTest() throws Exception {&#10;        super(Main.class);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;TestCase&lt;String&gt;&gt; generate() {&#10;        List&lt;TestCase&lt;String&gt;&gt; tests = List.of(&#10;            new TestCase&lt;String&gt;()&#10;                .setInput(&quot;4 5 7\n3 9 9&quot;),&#10;            new TestCase&lt;String&gt;()&#10;                .setInput(&quot;1 2 3\n4 5 6&quot;),&#10;            new TestCase&lt;String&gt;()&#10;                .setInput(&quot;1.2 3.4 5.6\n7.8 9.0 12.3&quot;),&#10;            new TestCase&lt;String&gt;()&#10;                .setInput(&quot;23.21 32.12 65.43\n1 0 1&quot;)&#10;        );&#10;&#10;        for (var test : tests) {&#10;            test.setAttach(solve(test.getInput()));&#10;        }&#10;&#10;        return tests;&#10;    }&#10;&#10;    private String solve(String input) {&#10;        Scanner sc = new Scanner(input);&#10;&#10;        double a = sc.nextDouble();&#10;        double b = sc.nextDouble();&#10;        double c = sc.nextDouble();&#10;        double d = sc.nextDouble();&#10;        double e = sc.nextDouble();&#10;        double f = sc.nextDouble();&#10;&#10;        double y = (f - c * (d / a)) / (e - b * (d / a));&#10;        double x = (c - b * y) / a;&#10;&#10;        return x + &quot; &quot; + y;&#10;    }&#10;&#10;    @Override&#10;    public CheckResult check(String reply, String clue) {&#10;        try {&#10;            double[] actual = Arrays.stream(reply.split(&quot; &quot;)).mapToDouble(Double::parseDouble).toArray();&#10;            double[] expected = Arrays.stream(clue.split(&quot; &quot;)).mapToDouble(Double::parseDouble).toArray();&#10;            if (actual.length != expected.length) {&#10;                return CheckResult.FALSE;&#10;            }&#10;            for (int i = 0; i &lt; actual.length; i++) {&#10;                if (abs(actual[i] - expected[i]) &gt; 0.001) {&#10;                    return CheckResult.FALSE;&#10;                }&#10;            }&#10;            return CheckResult.TRUE;&#10;        }&#10;        catch (NumberFormatException ex) {&#10;            return new CheckResult(false, &quot;Can't parse numbers - check if you don't print any additional symbols except a space between the numbers&quot;);&#10;        }&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/solver/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/solver/Main.java" />
                                <option name="text" value="package solver;&#10;&#10;import java.util.Scanner;&#10;&#10;public class Main {&#10;&#10;    public static void main(String[] args) {&#10;&#10;        LinearEquationSolver linearEquationSolver = new LinearEquationSolver();&#10;&#10;        Scanner scanner = new Scanner(System.in);&#10;&#10;        double a = scanner.nextDouble();&#10;        double b = scanner.nextDouble();&#10;&#10;        double result = linearEquationSolver.solveEquation(a, b);&#10;        System.out.println(result);&#10;    }&#10;}&#10;&#10;class LinearEquationSolver{&#10;&#10;    public double solveEquation(double a, double b){&#10;        return b/a;&#10;    }&#10;&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1561924689000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;In this stage, the problem became much harder. You should generalize the solution for any amount of variables. The important part is to understand that in most cases if the number of equations equals the number of variables there is only one solution. We will consider special cases in the next stage.&lt;/p&gt;&#10;&#10;&lt;p&gt;Such multiple linear equations connected together are called system of linear equations.&lt;/p&gt;&#10;&#10;&lt;p&gt;One of the most popular ways to solve them is Gauss-Jordan Elimination. You can see &lt;a href=&quot;https://www.youtube.com/watch?v=AhUyh-2aPEc&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://www.youtube.com/watch?v=2j5Ic2V7wq4&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;here&lt;/a&gt; detailed explanations of how to do it with 3 variables.&lt;/p&gt;&#10;&#10;&lt;p&gt;The general system of linear equations looks like in the picture below. The variables are named $ x_1, x_2, ..., x_n$. The coefficients are named $ a_{i1}, a_{i2}, ... a_{in} $ for the i-th row. And the constants are named $ b_1, b_2, ... b_n $.&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;115&quot; src=&quot;https://ucarecdn.com/b7d86b16-630c-4b81-bf0a-64c57db8edce/&quot; width=&quot;364&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;Like said in the video, firstly, the algorithm should null the first column of coefficients except for the first coefficient - it should be equal to 1. Notice letters c and d instead of a and b. It means that through some calculations these coefficients became other coefficients and thus we cannot use letters a and b since it would mean the initial coefficients.&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;115&quot; src=&quot;https://ucarecdn.com/4032f76a-620d-4ac8-8ff7-29ffb1770230/&quot; width=&quot;344&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;After that, you need to null the second column all the way from the third row. The second row should contain the coefficient equal to 1.&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;112&quot; src=&quot;https://ucarecdn.com/b4c3ed68-7d4b-4dc7-ac0b-289814d25daf/&quot; width=&quot;335&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;The same goes for the rest of the columns. In the end, you should get something like that:&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;120&quot; src=&quot;https://ucarecdn.com/588f8580-87f7-4db1-bd54-b84f6584d167/&quot; width=&quot;362&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;The second part of the algorithm is to iterate rows from the last to the first and null the top part of the linear system. In the end, there should be only diagonal elements of the linear system.&lt;br&gt;&#10;    &lt;br&gt;&#10;    &lt;img alt=&quot;&quot; height=&quot;120&quot; src=&quot;https://ucarecdn.com/cf0f38e4-ad7e-44fd-81c8-665a0ce9ec1a/&quot; width=&quot;336&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;And the right part of the system is the solution to this system.&lt;/p&gt;&#10;&#10;&lt;p&gt;In this stage, you need to write a program that reads coefficients from a file, solves the system of linear equations and writes the answer to another file. You should pass paths to files using command-line arguments. Write to the file only answers separated by &lt;code&gt;&quot;\n&quot;&lt;/code&gt;. Output all the steps only to the console, not in the file.&lt;/p&gt;&#10;&#10;&lt;p&gt;The first line of the file should contain the number N - a number of variables being also a number of equations. Every other N lines contain N+1 numbers - N coefficients of the current row and a constant as the last number in this line. The program also should output all rows manipulation it is doing during solving the system of linear equations.&lt;/p&gt;&#10;&#10;&lt;p&gt;Try to create various classes like &lt;code&gt;Matrix&lt;/code&gt;, &lt;code&gt;Row&lt;/code&gt;, &lt;code&gt;LinearEquation&lt;/code&gt;. With these, the code would be more readable and easier to program.&lt;/p&gt;&#10;&#10;&lt;h2&gt;Output example&lt;/h2&gt;&#10;&#10;&lt;p&gt;Suppose you have a file named &lt;code&gt;in.txt&lt;/code&gt;. It contains the following:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code&gt;3&#10;1 1 2 9&#10;2 4 -3 1&#10;3 6 -5 0&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;Below is how your program might work. The lines which start with &lt;code&gt;&amp;gt;&lt;/code&gt; represent the user input.&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code&gt;&amp;gt; java Solver -in in.txt -out out.txt&#10;Start solving the equation.&#10;Rows manipulation:&#10;-2 * R1 + R2 -&amp;gt; R2&#10;-3 * R1 + R3 -&amp;gt; R3&#10;0.5 * R2 -&amp;gt; R2&#10;-3 * R2 + R3 -&amp;gt; R3&#10;-2 * R3 -&amp;gt; R3&#10;3.5 * R3 + R2 -&amp;gt; R2&#10;-2 * R3 + R1 -&amp;gt; R1&#10;-1 * R2 + R1 -&amp;gt; R1&#10;The solution is: (1.0, 2.0, 3.0)&#10;Saved to file out.txt&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;And the file &lt;code&gt;out.txt&lt;/code&gt; should look like this (each answer should be on separate lines without any excess symbols). &lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;1.0&#10;2.0&#10;3.0&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt; &lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/40/stages/211/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5307" />
                      <option name="index" value="3" />
                      <option name="name" value="Equations" />
                      <option name="record" value="1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="test/SolverTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/SolverTest.java" />
                                <option name="text" value="import org.hyperskill.hstest.v5.testcase.CheckResult;&#10;import org.hyperskill.hstest.v5.stage.BaseStageTest;&#10;import org.hyperskill.hstest.v5.testcase.TestCase;&#10;import solver.Main;&#10;&#10;import java.nio.file.FileSystemException;&#10;import java.util.ArrayList;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;&#10;import static java.lang.Math.abs;&#10;import static org.hyperskill.hstest.v5.common.Utils.readFile;&#10;&#10;&#10;class TestClue {&#10;&#10;    String feedback;&#10;    String outFile;&#10;    ArrayList&lt;Double&gt; answers;&#10;&#10;    TestClue(String feedback, String outFile, Double[] answers) {&#10;        this.feedback = feedback;&#10;        this.outFile = outFile;&#10;        this.answers = new ArrayList&lt;&gt;(Arrays.asList(answers));&#10;    }&#10;}&#10;&#10;&#10;public class SolverTest extends BaseStageTest&lt;TestClue&gt; {&#10;&#10;    public SolverTest() throws Exception {&#10;        super(Main.class);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;TestCase&lt;TestClue&gt;&gt; generate() {&#10;        return List.of(&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Test exactly like in the example&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    new Double[]{1d, 2d, 3d}))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;3\n&quot; +&#10;                    &quot;1 1 2 9\n&quot; +&#10;                    &quot;2 4 -3 1\n&quot; +&#10;                    &quot;3 6 -5 0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    new Double[]{1d, 1d}))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;2\n&quot; +&#10;                    &quot;1 0 1\n&quot; +&#10;                    &quot;0 1 1&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Check if you process \&quot;-in\&quot; argument from command line&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    new Double[]{1d, 1d}))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;input.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;input.txt&quot;,&#10;                &quot;2\n&quot; +&#10;                    &quot;1 0 1\n&quot; +&#10;                    &quot;0 1 1&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Check if you process \&quot;-out\&quot; argument from command line&quot;,&#10;                    &quot;output.txt&quot;,&#10;                    new Double[]{1d, 1d}))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;output.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;2\n&quot; +&#10;                    &quot;1 0 1\n&quot; +&#10;                    &quot;0 1 1&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    new Double[]{2d, 2d}))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;2\n&quot; +&#10;                    &quot;1 0 2\n&quot; +&#10;                    &quot;0 1 2&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    new Double[]{1d, 1d}))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;2\n&quot; +&#10;                    &quot;2 0 2\n&quot; +&#10;                    &quot;0 2 2&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    new Double[]{-1d, 1d}))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;2\n&quot; +&#10;                    &quot;1 2 1\n&quot; +&#10;                    &quot;3 4 1&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;This test is a system of 20 linear equations&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    new Double[]{&#10;                        0.5428d,&#10;                        -2.3923d,&#10;                        1.5789d,&#10;                        -1.3679d,&#10;                        0.6433d,&#10;                        -1.7531d,&#10;                        -0.0432d,&#10;                        -0.7503d,&#10;                        -0.8245d,&#10;                        -0.4562d,&#10;                        -1.2163d,&#10;                        0.3093d,&#10;                        -0.1105d,&#10;                        1.1717d,&#10;                        -0.5873d,&#10;                        -1.3933d,&#10;                        1.1229d,&#10;                        3.0693d,&#10;                        1.1995d,&#10;                        1.5399}))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;20\n&quot; +&#10;                    &quot;26 90 17 67 68 9 60 38 37 38 76 14 33 94 88 58 99 84 9 45 18\n&quot; +&#10;                    &quot;37 34 20 53 10 61 75 49 91 84 55 84 84 81 30 22 42 76 33 27 2\n&quot; +&#10;                    &quot;99 69 63 57 39 45 33 43 99 26 25 24 80 91 62 90 54 77 88 32 94\n&quot; +&#10;                    &quot;37 40 14 5 47 30 5 21 36 77 57 38 29 3 61 12 81 19 39 56 9\n&quot; +&#10;                    &quot;36 73 71 39 9 9 31 10 84 7 13 45 9 34 2 14 88 43 17 4 86\n&quot; +&#10;                    &quot;31 29 76 89 26 35 11 55 37 5 41 96 19 18 100 20 21 49 83 5 20\n&quot; +&#10;                    &quot;18 18 25 70 79 74 30 66 41 93 63 2 90 4 46 1 77 89 21 47 52\n&quot; +&#10;                    &quot;32 62 27 80 57 10 35 44 97 18 58 19 5 81 33 54 83 66 25 75 75\n&quot; +&#10;                    &quot;56 53 13 91 30 11 72 52 13 86 73 88 94 20 25 77 90 75 73 52 36\n&quot; +&#10;                    &quot;63 9 40 40 35 90 55 92 12 98 34 37 64 21 67 91 15 65 82 87 30\n&quot; +&#10;                    &quot;71 5 65 64 6 20 9 81 40 56 39 93 74 55 83 81 74 2 58 86 58\n&quot; +&#10;                    &quot;13 50 31 86 73 36 83 27 37 96 37 28 75 91 15 78 90 56 57 18 18\n&quot; +&#10;                    &quot;34 9 51 11 92 54 25 91 61 69 37 37 89 91 95 50 10 16 69 71 66\n&quot; +&#10;                    &quot;25 16 79 36 6 28 51 100 5 28 97 23 44 32 50 2 96 18 5 48 44\n&quot; +&#10;                    &quot;80 38 47 96 41 72 85 79 2 3 96 14 2 65 97 38 76 73 88 59 89\n&quot; +&#10;                    &quot;31 98 88 52 49 68 46 79 26 30 31 76 84 87 27 16 66 55 78 2 46\n&quot; +&#10;                    &quot;57 2 32 78 70 7 95 56 77 97 49 14 74 7 85 48 83 59 71 5 44\n&quot; +&#10;                    &quot;4 64 4 43 54 99 77 7 72 82 27 22 29 94 53 48 65 88 26 86 42\n&quot; +&#10;                    &quot;69 59 62 63 42 29 73 18 82 78 48 60 84 73 84 9 82 53 14 1 12\n&quot; +&#10;                    &quot;98 2 47 62 69 11 28 14 83 32 94 24 71 1 16 91 53 50 38 26 17&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;This test is a system of 20 linear equations&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    new Double[]{&#10;                        0.2182d,&#10;                        0.3886d,&#10;                        0.2337d,&#10;                        0.5804d,&#10;                        -0.1867d,&#10;                        0.3536d,&#10;                        -0.5597d,&#10;                        -0.4706d,&#10;                        -0.3946d,&#10;                        -0.4577d,&#10;                        0.371d,&#10;                        -0.1959d,&#10;                        1.1403d,&#10;                        0.2808d,&#10;                        -0.8712d,&#10;                        -0.3355d,&#10;                        -0.1309d,&#10;                        -0.3008d,&#10;                        0.6355d,&#10;                        0.4716d}))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;20\n&quot; +&#10;                    &quot;0.11 0.62 0.28 0.94 0.53 0.94 0.06 1.0 0.61 0.45 0.03 0.79 0.87 0.32 0.66 0.5 0.14 0.82 0.44 0.13 0.43\n&quot; +&#10;                    &quot;0.8 0.7 0.16 0.09 0.4 0.63 0.46 1.0 0.9 0.14 0.03 0.8 0.98 0.71 0.67 0.42 0.73 0.01 0.75 0.59 0.64\n&quot; +&#10;                    &quot;0.99 0.01 0.45 0.85 0.17 0.14 0.58 0.27 0.96 0.52 0.74 0.89 0.72 0.93 0.22 0.9 0.41 0.78 0.56 0.67 0.84\n&quot; +&#10;                    &quot;0.19 0.35 0.98 0.28 0.74 0.42 0.82 0.51 0.33 0.84 0.85 0.46 0.71 0.93 0.11 0.88 0.08 0.72 0.68 0.73 0.82\n&quot; +&#10;                    &quot;0.59 0.52 0.17 0.62 0.9 0.66 0.23 0.47 0.29 0.78 0.43 0.99 0.67 0.63 0.38 0.85 0.72 0.6 0.97 0.75 0.96\n&quot; +&#10;                    &quot;0.66 0.24 0.9 0.43 0.39 0.31 0.64 0.17 0.75 0.62 0.38 0.38 0.41 0.38 0.41 0.9 0.29 0.21 0.54 0.87 0.35\n&quot; +&#10;                    &quot;0.06 0.57 0.04 0.74 0.27 0.75 0.0 0.52 0.42 0.85 0.35 0.19 0.57 0.42 0.93 0.77 0.09 0.4 0.83 0.39 0.46\n&quot; +&#10;                    &quot;0.87 0.77 0.71 0.61 0.73 0.28 0.02 0.96 0.29 0.37 0.27 0.43 0.02 0.82 0.16 0.34 0.49 0.9 0.35 0.11 0.18\n&quot; +&#10;                    &quot;0.87 0.7 0.4 0.27 0.35 0.57 0.36 0.89 0.09 0.78 0.64 0.84 0.06 0.69 0.41 0.4 0.64 0.55 0.81 0.69 0.27\n&quot; +&#10;                    &quot;0.34 0.49 0.27 1.0 0.78 0.01 0.58 0.87 0.47 0.27 0.23 0.35 0.55 0.06 0.67 0.74 0.17 0.68 0.75 0.76 0.16\n&quot; +&#10;                    &quot;0.38 0.71 0.29 0.94 0.84 0.46 0.98 0.0 0.89 0.58 0.09 0.04 0.04 0.66 0.21 0.58 0.8 0.96 0.78 0.67 0.11\n&quot; +&#10;                    &quot;0.36 0.37 0.1 0.36 0.46 0.15 0.99 0.38 0.39 0.52 0.76 0.68 0.94 0.31 0.21 0.99 0.78 0.17 0.15 0.06 0.06\n&quot; +&#10;                    &quot;0.94 0.3 0.35 0.24 0.79 0.86 0.7 0.81 0.2 0.23 0.52 0.91 0.55 0.21 0.47 0.44 0.1 0.97 0.61 0.13 0.03\n&quot; +&#10;                    &quot;0.03 0.28 0.32 0.06 0.54 0.08 1.0 0.69 0.29 0.48 0.84 0.37 0.74 0.13 0.2 0.75 0.46 0.03 0.68 0.72 0.33\n&quot; +&#10;                    &quot;0.43 0.78 0.69 0.91 0.8 0.68 0.46 0.9 0.65 0.19 0.81 0.28 0.3 0.75 0.94 0.05 0.65 0.29 0.61 0.74 0.68\n&quot; +&#10;                    &quot;0.01 0.46 0.38 0.72 0.97 0.39 0.88 0.62 0.93 0.26 0.58 0.02 0.95 0.49 0.69 0.64 0.47 0.53 0.43 0.1 0.09\n&quot; +&#10;                    &quot;0.83 0.72 0.84 0.41 0.53 0.53 0.67 0.09 0.49 0.42 0.88 0.14 0.09 0.02 0.49 0.29 0.29 0.17 0.08 0.9 0.45\n&quot; +&#10;                    &quot;0.54 0.57 0.53 0.23 0.78 0.89 0.24 0.98 0.7 0.75 0.46 0.85 0.39 0.58 0.36 0.29 0.54 0.83 0.97 0.62 0.34\n&quot; +&#10;                    &quot;0.3 0.64 0.71 0.07 0.03 0.76 0.25 0.34 0.97 0.93 0.48 0.57 0.98 0.33 0.4 0.18 0.01 0.81 0.38 0.87 0.95\n&quot; +&#10;                    &quot;0.25 0.7 0.07 0.4 0.67 0.84 0.12 0.43 0.61 0.7 0.89 0.88 0.48 0.14 0.32 0.98 0.15 0.87 0.34 0.81 0.37&quot;)&#10;        );&#10;    }&#10;&#10;    @Override&#10;    public CheckResult check(String reply, TestClue clue) {&#10;        try {&#10;            reply = readFile(clue.outFile);&#10;&#10;            double[] actual =&#10;                Arrays&#10;                    .stream(reply.split(&quot;\n&quot;))&#10;                    .map(String::strip)&#10;                    .mapToDouble(Double::parseDouble)&#10;                    .toArray();&#10;&#10;            double[] expected =&#10;                clue.answers.stream()&#10;                    .mapToDouble(e -&gt; e)&#10;                    .toArray();&#10;&#10;            if (actual.length != expected.length) {&#10;                return new CheckResult(false, clue.feedback);&#10;            }&#10;&#10;            for (int i = 0; i &lt; actual.length; i++) {&#10;                if (abs(actual[i] - expected[i]) &gt; 0.001) {&#10;                    return new CheckResult(false, clue.feedback);&#10;                }&#10;            }&#10;&#10;            return CheckResult.TRUE;&#10;        }&#10;        catch (NumberFormatException ex) {&#10;            return new CheckResult(false,&#10;                &quot;Numbers should be written in file on &quot; +&#10;                        &quot;separate lines without any additional symbols&quot;);&#10;        }&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/solver/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/solver/Main.java" />
                                <option name="text" value="package solver;&#10;&#10;import java.util.Scanner;&#10;&#10;&#10;public class Main {&#10;&#10;    public static void main(String[] args) {&#10;&#10;        LinearEquationSolver linearEquationSolver = new LinearEquationSolver();&#10;&#10;        Scanner scanner = new Scanner(System.in);&#10;&#10;        double a = scanner.nextDouble();&#10;        double b = scanner.nextDouble();&#10;        double c = scanner.nextDouble();&#10;        double d = scanner.nextDouble();&#10;        double e = scanner.nextDouble();&#10;        double f = scanner.nextDouble();&#10;&#10;        double y = linearEquationSolver.findY(a,b,c,d,e,f);&#10;        double x = linearEquationSolver.findX(a,b, c, y);&#10;        System.out.println(x +&quot; &quot; + y);&#10;    }&#10;}&#10;&#10;class LinearEquationSolver{&#10;&#10;    public double findY(double a, double b, double c, double d, double e, double f){&#10;        return (f - c *(d/a))/(e - b *(d/a));&#10;    }&#10;&#10;    public double findX(double a, double b, double c, double y){&#10;        return (c - (b*y))/a;&#10;    }&#10;&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/solver/in.txt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/solver/in.txt" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/solver/out.txt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/solver/out.txt" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="output.txt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="output.txt" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="out.txt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="out.txt" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1561924689000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;This stage is devoted to various special cases of the algorithm.&lt;/p&gt;&#10;&#10;&lt;p&gt;Firstly, look at the first stage of the algorithm. It says that you should change the first row in a way that the first element of the row would be equal to 1. But what if the first element of the row is 0? Any multiplication of the row never let the first element of the row be equal to 1 because it would always be 0.&lt;/p&gt;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;103&quot; src=&quot;https://ucarecdn.com/4948bd52-2be3-4cb7-b06d-eee423e3755b/&quot; width=&quot;320&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;Because of that, you need to modify the algorithm.&lt;/p&gt;&#10;&#10;&lt;ol&gt;&#10;  &lt;li&gt;Before the scaling the row you should check if the corresponding element of the row is not equal to 0.&lt;/li&gt;&#10;  &lt;li&gt;If it is, look below and to the right direction of the element in search of a non-zero element.&lt;/li&gt;&#10;  &lt;li&gt;If there is a non-zero coefficient below the element, you need to swap this row with the row that contains zero in this place.&lt;/li&gt;&#10;  &lt;li&gt;If below the element all coefficients are also zero you should search for a non-zero coefficient to the right of an element. If there is one, swap the whole column with this element and the column with that initial element which is equal to 0. Don't forget to remember this swap because after al,l you need to swap back them to output the solutions in the right order. There can be a lot of swaps.&lt;/li&gt;&#10;  &lt;li&gt;If there no non-zero elements below and no non-zero elements to the right, you should find the non-zero element in the whole bottom-left part of the linear system. If there is one, swap the corresponding rows and also swap the corresponding columns. Also, don't forget to remember this swap of the columns.&lt;/li&gt;&#10;  &lt;li&gt;If there are no such elements in the whole bottom-left part of the linear system, you should end the first part of the algorithm.&lt;/li&gt;&#10;&lt;/ol&gt;&#10;&#10;&lt;p&gt;After all the manipulations in the first half of the algorithm, check the possibility of no solutions. It is possible when there is a fill-zero row and a constant is not equal to zero. You can see the example below. In this case, a linear system contains a contradiction and therefore have no solutions. In this case, you can end the algorithm.&lt;/p&gt;&#10;&#10;&lt;p&gt; &lt;/p&gt;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;62&quot; src=&quot;https://ucarecdn.com/86e8a527-95ca-49ec-81d3-6b7ff6b07140/&quot; width=&quot;256&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt; &lt;/p&gt;&#10;&#10;&lt;p&gt;Secondly, the linear system doesn't need to be an equal in amount variables and in amount of equations.&lt;/p&gt;&#10;&#10;&lt;p&gt;A number of significant equations are equal to the number of non-zero rows in the linear system. A number of significant variables are equal to the number of all columns in the linear system. After that, you can determine if the linear system has an infinite amount of solutions or a single one.&lt;br&gt;&#10;  &lt;br&gt;&#10;  The following variants are possible:&lt;/p&gt;&#10;&#10;&lt;p&gt;1. The number of significant equations is equal to the number of significant variables. There is only one solution, you can find it like in the previous stage. The possible examples are shown below:&lt;/p&gt;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;129&quot; src=&quot;https://ucarecdn.com/eb454105-3f3f-4833-988d-91b6671843b7/&quot; width=&quot;340&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;br&gt;&#10;  2. The number of significant equations is less than the number of significant variables. There is infinitely many solutions. The possible examples are shown below:&lt;/p&gt;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;200&quot; src=&quot;https://ucarecdn.com/4afce670-32f7-4cc8-b75e-6fed3d57ee5a/&quot; width=&quot;356&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;Note that there can't be a case in which the number of significant equations is greater than the number of significant variables because in this case there would be a contradiction we handled in the previous steps of the algorithm.&lt;/p&gt;&#10;&#10;&lt;p&gt;In this stage you should write a program that handles all these nuances.&lt;/p&gt;&#10;&#10;&lt;p&gt;Write to file only &lt;code&gt;No solutions&lt;/code&gt; or &lt;code&gt;Infinitely many solutions&lt;/code&gt; when this appears to happen. If there is a single solution you should write to file only &lt;span class=&quot;math-tex&quot;&gt;\(x_1, x_2, ... , x_n\)&lt;/span&gt;, and every number should be on a separate line.&lt;/p&gt;&#10;&#10;&lt;p&gt;Don't forget that input can contain floating-point numbers.&lt;/p&gt;&#10;&#10;&lt;p&gt;You can refactor your code and work with a linear equation on a high level of abstraction - using Command pattern.&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Output example&lt;/h2&gt;&#10;&#10;&lt;p&gt;Suppose you have a file named in.txt. It contains the following. Note that the first line contains the number of variables and the number of equations. So, in the following example, there are three variables, &lt;span class=&quot;math-tex&quot;&gt;\(x_1\)&lt;/span&gt;, &lt;span class=&quot;math-tex&quot;&gt;\(x_2\)&lt;/span&gt;, &lt;span class=&quot;math-tex&quot;&gt;\(x_3\)&lt;/span&gt; (remember, that last column is devoted to &lt;span class=&quot;math-tex&quot;&gt;\(b_i\)&lt;/span&gt; ) and four equations (number of equations is the number of rows).&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code&gt;3 4&#10;0 1 2 9&#10;0 1 3 1&#10;1 0 6 0&#10;2 0 2 0&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;Below is how your program might work. The lines which start with &lt;code&gt;&amp;gt;&lt;/code&gt; represent the user input.&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code&gt;&amp;gt; java Solver -in in.txt -out out.txt&#10;Start solving the equation.&#10;Rows manipulation:&#10;R1 &amp;lt;-&amp;gt; R3&#10;2 * R1 + R4 -&amp;gt; R4&#10;-1 * R2 + R3 -&amp;gt; R3&#10;-1 * R3 -&amp;gt; R3&#10;No solutions&#10;Saved to file out.txt&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;And the file &lt;code&gt;out.txt&lt;/code&gt; should look like this.  &lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;No solutions&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt; &lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/40/stages/212/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5308" />
                      <option name="index" value="4" />
                      <option name="name" value="When things get complicated" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="test/SolverTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/SolverTest.java" />
                                <option name="text" value="import org.hyperskill.hstest.v5.testcase.CheckResult;&#10;import org.hyperskill.hstest.v5.stage.BaseStageTest;&#10;import org.hyperskill.hstest.v5.testcase.TestCase;&#10;import solver.Main;&#10;&#10;import java.util.ArrayList;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;&#10;import static java.lang.Math.abs;&#10;import static org.hyperskill.hstest.v5.common.Utils.readFile;&#10;&#10;&#10;class TestClue {&#10;&#10;    String feedback;&#10;    String outFile;&#10;    ArrayList&lt;Double&gt; answers;&#10;    String answer;&#10;&#10;    TestClue(String feedback, String outFile, Double[] answers) {&#10;        this.feedback = feedback;&#10;        this.outFile = outFile;&#10;        this.answers = new ArrayList&lt;&gt;(Arrays.asList(answers));&#10;    }&#10;&#10;    TestClue(String feedback, String outFile, String answer) {&#10;        this.feedback = feedback;&#10;        this.outFile = outFile;&#10;        this.answer = answer;&#10;    }&#10;}&#10;&#10;&#10;public class SolverTest extends BaseStageTest&lt;TestClue&gt; {&#10;&#10;    public SolverTest() throws Exception {&#10;        super(Main.class);&#10;    }&#10;&#10;    static String noSolutions = &quot;No solutions&quot;;&#10;    static String infiniteSolutions = &quot;Infinitely many solutions&quot;;&#10;&#10;    @Override&#10;    public List&lt;TestCase&lt;TestClue&gt;&gt; generate() {&#10;        return List.of(&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    new Double[]{1d, 2d, 3d}))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;3 3\n&quot; +&#10;                    &quot;1 1 2 9\n&quot; +&#10;                    &quot;2 4 -3 1\n&quot; +&#10;                    &quot;3 6 -5 0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    new Double[]{1d, 1d}))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;2 2\n&quot; +&#10;                    &quot;1 0 1\n&quot; +&#10;                    &quot;0 1 1&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Check if you process \&quot;-in\&quot; argument from command line&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    new Double[]{1d, 1d}))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;input.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;input.txt&quot;,&#10;                &quot;2 2\n&quot; +&#10;                    &quot;1 0 1\n&quot; +&#10;                    &quot;0 1 1&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Check if you process \&quot;-out\&quot; argument from command line&quot;,&#10;                    &quot;output.txt&quot;,&#10;                    new Double[]{1d, 1d}))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;output.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;2 2\n&quot; +&#10;                    &quot;1 0 1\n&quot; +&#10;                    &quot;0 1 1&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    new Double[]{2d, 2d}))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;2 2\n&quot; +&#10;                    &quot;1 0 2\n&quot; +&#10;                    &quot;0 1 2&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    new Double[]{1d, 1d}))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;2 2\n&quot; +&#10;                    &quot;2 0 2\n&quot; +&#10;                    &quot;0 2 2&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    new Double[]{-1d, 1d}))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;2 2\n&quot; +&#10;                    &quot;1 2 1\n&quot; +&#10;                    &quot;3 4 1&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;This test is a system of 20 linear equations&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    new Double[]{&#10;                        0.5428d,&#10;                        -2.3923d,&#10;                        1.5789d,&#10;                        -1.3679d,&#10;                        0.6433d,&#10;                        -1.7531d,&#10;                        -0.0432d,&#10;                        -0.7503d,&#10;                        -0.8245d,&#10;                        -0.4562d,&#10;                        -1.2163d,&#10;                        0.3093d,&#10;                        -0.1105d,&#10;                        1.1717d,&#10;                        -0.5873d,&#10;                        -1.3933d,&#10;                        1.1229d,&#10;                        3.0693d,&#10;                        1.1995d,&#10;                        1.5399}))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;20 20\n&quot; +&#10;                    &quot;26 90 17 67 68 9 60 38 37 38 76 14 33 94 88 58 99 84 9 45 18\n&quot; +&#10;                    &quot;37 34 20 53 10 61 75 49 91 84 55 84 84 81 30 22 42 76 33 27 2\n&quot; +&#10;                    &quot;99 69 63 57 39 45 33 43 99 26 25 24 80 91 62 90 54 77 88 32 94\n&quot; +&#10;                    &quot;37 40 14 5 47 30 5 21 36 77 57 38 29 3 61 12 81 19 39 56 9\n&quot; +&#10;                    &quot;36 73 71 39 9 9 31 10 84 7 13 45 9 34 2 14 88 43 17 4 86\n&quot; +&#10;                    &quot;31 29 76 89 26 35 11 55 37 5 41 96 19 18 100 20 21 49 83 5 20\n&quot; +&#10;                    &quot;18 18 25 70 79 74 30 66 41 93 63 2 90 4 46 1 77 89 21 47 52\n&quot; +&#10;                    &quot;32 62 27 80 57 10 35 44 97 18 58 19 5 81 33 54 83 66 25 75 75\n&quot; +&#10;                    &quot;56 53 13 91 30 11 72 52 13 86 73 88 94 20 25 77 90 75 73 52 36\n&quot; +&#10;                    &quot;63 9 40 40 35 90 55 92 12 98 34 37 64 21 67 91 15 65 82 87 30\n&quot; +&#10;                    &quot;71 5 65 64 6 20 9 81 40 56 39 93 74 55 83 81 74 2 58 86 58\n&quot; +&#10;                    &quot;13 50 31 86 73 36 83 27 37 96 37 28 75 91 15 78 90 56 57 18 18\n&quot; +&#10;                    &quot;34 9 51 11 92 54 25 91 61 69 37 37 89 91 95 50 10 16 69 71 66\n&quot; +&#10;                    &quot;25 16 79 36 6 28 51 100 5 28 97 23 44 32 50 2 96 18 5 48 44\n&quot; +&#10;                    &quot;80 38 47 96 41 72 85 79 2 3 96 14 2 65 97 38 76 73 88 59 89\n&quot; +&#10;                    &quot;31 98 88 52 49 68 46 79 26 30 31 76 84 87 27 16 66 55 78 2 46\n&quot; +&#10;                    &quot;57 2 32 78 70 7 95 56 77 97 49 14 74 7 85 48 83 59 71 5 44\n&quot; +&#10;                    &quot;4 64 4 43 54 99 77 7 72 82 27 22 29 94 53 48 65 88 26 86 42\n&quot; +&#10;                    &quot;69 59 62 63 42 29 73 18 82 78 48 60 84 73 84 9 82 53 14 1 12\n&quot; +&#10;                    &quot;98 2 47 62 69 11 28 14 83 32 94 24 71 1 16 91 53 50 38 26 17&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;This test is a system of 20 linear equations&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    new Double[]{&#10;                        0.2182d,&#10;                        0.3886d,&#10;                        0.2337d,&#10;                        0.5804d,&#10;                        -0.1867d,&#10;                        0.3536d,&#10;                        -0.5597d,&#10;                        -0.4706d,&#10;                        -0.3946d,&#10;                        -0.4577d,&#10;                        0.371d,&#10;                        -0.1959d,&#10;                        1.1403d,&#10;                        0.2808d,&#10;                        -0.8712d,&#10;                        -0.3355d,&#10;                        -0.1309d,&#10;                        -0.3008d,&#10;                        0.6355d,&#10;                        0.4716d}))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;20 20\n&quot; +&#10;                    &quot;0.11 0.62 0.28 0.94 0.53 0.94 0.06 1.0 0.61 0.45 0.03 0.79 0.87 0.32 0.66 0.5 0.14 0.82 0.44 0.13 0.43\n&quot; +&#10;                    &quot;0.8 0.7 0.16 0.09 0.4 0.63 0.46 1.0 0.9 0.14 0.03 0.8 0.98 0.71 0.67 0.42 0.73 0.01 0.75 0.59 0.64\n&quot; +&#10;                    &quot;0.99 0.01 0.45 0.85 0.17 0.14 0.58 0.27 0.96 0.52 0.74 0.89 0.72 0.93 0.22 0.9 0.41 0.78 0.56 0.67 0.84\n&quot; +&#10;                    &quot;0.19 0.35 0.98 0.28 0.74 0.42 0.82 0.51 0.33 0.84 0.85 0.46 0.71 0.93 0.11 0.88 0.08 0.72 0.68 0.73 0.82\n&quot; +&#10;                    &quot;0.59 0.52 0.17 0.62 0.9 0.66 0.23 0.47 0.29 0.78 0.43 0.99 0.67 0.63 0.38 0.85 0.72 0.6 0.97 0.75 0.96\n&quot; +&#10;                    &quot;0.66 0.24 0.9 0.43 0.39 0.31 0.64 0.17 0.75 0.62 0.38 0.38 0.41 0.38 0.41 0.9 0.29 0.21 0.54 0.87 0.35\n&quot; +&#10;                    &quot;0.06 0.57 0.04 0.74 0.27 0.75 0.0 0.52 0.42 0.85 0.35 0.19 0.57 0.42 0.93 0.77 0.09 0.4 0.83 0.39 0.46\n&quot; +&#10;                    &quot;0.87 0.77 0.71 0.61 0.73 0.28 0.02 0.96 0.29 0.37 0.27 0.43 0.02 0.82 0.16 0.34 0.49 0.9 0.35 0.11 0.18\n&quot; +&#10;                    &quot;0.87 0.7 0.4 0.27 0.35 0.57 0.36 0.89 0.09 0.78 0.64 0.84 0.06 0.69 0.41 0.4 0.64 0.55 0.81 0.69 0.27\n&quot; +&#10;                    &quot;0.34 0.49 0.27 1.0 0.78 0.01 0.58 0.87 0.47 0.27 0.23 0.35 0.55 0.06 0.67 0.74 0.17 0.68 0.75 0.76 0.16\n&quot; +&#10;                    &quot;0.38 0.71 0.29 0.94 0.84 0.46 0.98 0.0 0.89 0.58 0.09 0.04 0.04 0.66 0.21 0.58 0.8 0.96 0.78 0.67 0.11\n&quot; +&#10;                    &quot;0.36 0.37 0.1 0.36 0.46 0.15 0.99 0.38 0.39 0.52 0.76 0.68 0.94 0.31 0.21 0.99 0.78 0.17 0.15 0.06 0.06\n&quot; +&#10;                    &quot;0.94 0.3 0.35 0.24 0.79 0.86 0.7 0.81 0.2 0.23 0.52 0.91 0.55 0.21 0.47 0.44 0.1 0.97 0.61 0.13 0.03\n&quot; +&#10;                    &quot;0.03 0.28 0.32 0.06 0.54 0.08 1.0 0.69 0.29 0.48 0.84 0.37 0.74 0.13 0.2 0.75 0.46 0.03 0.68 0.72 0.33\n&quot; +&#10;                    &quot;0.43 0.78 0.69 0.91 0.8 0.68 0.46 0.9 0.65 0.19 0.81 0.28 0.3 0.75 0.94 0.05 0.65 0.29 0.61 0.74 0.68\n&quot; +&#10;                    &quot;0.01 0.46 0.38 0.72 0.97 0.39 0.88 0.62 0.93 0.26 0.58 0.02 0.95 0.49 0.69 0.64 0.47 0.53 0.43 0.1 0.09\n&quot; +&#10;                    &quot;0.83 0.72 0.84 0.41 0.53 0.53 0.67 0.09 0.49 0.42 0.88 0.14 0.09 0.02 0.49 0.29 0.29 0.17 0.08 0.9 0.45\n&quot; +&#10;                    &quot;0.54 0.57 0.53 0.23 0.78 0.89 0.24 0.98 0.7 0.75 0.46 0.85 0.39 0.58 0.36 0.29 0.54 0.83 0.97 0.62 0.34\n&quot; +&#10;                    &quot;0.3 0.64 0.71 0.07 0.03 0.76 0.25 0.34 0.97 0.93 0.48 0.57 0.98 0.33 0.4 0.18 0.01 0.81 0.38 0.87 0.95\n&quot; +&#10;                    &quot;0.25 0.7 0.07 0.4 0.67 0.84 0.12 0.43 0.61 0.7 0.89 0.88 0.48 0.14 0.32 0.98 0.15 0.87 0.34 0.81 0.37&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Check is the first element is zero&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    new Double[]{1d, 1d}))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;2 2\n&quot; +&#10;                    &quot;0 1 1\n&quot; +&#10;                    &quot;1 0 1&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    new Double[]{2d, 1d}))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;2 2\n&quot; +&#10;                    &quot;0 1 1\n&quot; +&#10;                    &quot;1 0 2&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    new Double[]{&#10;                        -0.5175d,&#10;                        -0.1523d,&#10;                        0.7669d,&#10;                        2.0115d,&#10;                        0.0958d,&#10;                        0.2849d,}))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;6 6\n&quot; +&#10;                    &quot;2 6 1 3 9 1 6\n&quot; +&#10;                    &quot;9 2 4 3 6 1 5\n&quot; +&#10;                    &quot;6 5 9 1 4 2 6\n&quot; +&#10;                    &quot;4 1 1 2 9 2 4\n&quot; +&#10;                    &quot;5 4 6 2 3 1 6\n&quot; +&#10;                    &quot;3 5 4 1 7 9 6&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    new Double[]{&#10;                        0.241,&#10;                        0.5984,&#10;                        0.2851,&#10;                        0.1325,&#10;                        0.1446,&#10;                        0.4257,}))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;6 6\n&quot; +&#10;                    &quot;0 6 1 3 9 1 6\n&quot; +&#10;                    &quot;9 0 4 3 6 1 5\n&quot; +&#10;                    &quot;6 5 0 1 4 2 6\n&quot; +&#10;                    &quot;4 1 1 0 9 2 4\n&quot; +&#10;                    &quot;5 4 6 2 0 1 6\n&quot; +&#10;                    &quot;3 5 4 1 7 0 6&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    new Double[]{&#10;                        -65.8154,&#10;                        13.0615,&#10;                        -4.4,&#10;                        2.6154,&#10;                        -0.9231,&#10;                        3.5385,}))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;6 6\n&quot; +&#10;                    &quot;1 6 1 1 9 1 6\n&quot; +&#10;                    &quot;0 1 4 3 2 1 5\n&quot; +&#10;                    &quot;0 0 0 1 4 2 6\n&quot; +&#10;                    &quot;0 0 0 2 9 2 4\n&quot; +&#10;                    &quot;0 0 0 2 3 1 6\n&quot; +&#10;                    &quot;0 0 5 1 7 9 6&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    new Double[]{&#10;                        -50.381,&#10;                        10.6508,&#10;                        -2.0794,&#10;                        0.5556,&#10;                        -1d,&#10;                        3d,}))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;6 6\n&quot; +&#10;                    &quot;1 6 1 1 9 1 6\n&quot; +&#10;                    &quot;0 1 4 3 2 1 5\n&quot; +&#10;                    &quot;0 0 0 0 0 2 6\n&quot; +&#10;                    &quot;0 0 0 0 2 2 4\n&quot; +&#10;                    &quot;0 0 0 9 2 1 6\n&quot; +&#10;                    &quot;0 0 7 1 7 9 6&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Test exactly like in the example&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    noSolutions))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;3 4\n&quot; +&#10;                    &quot;0 1 2 9\n&quot; +&#10;                    &quot;0 1 3 1\n&quot; +&#10;                    &quot;1 0 6 0\n&quot; +&#10;                    &quot;2 0 2 0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;There are 4 rows, 3 columns, and a single solution&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    new Double[]{&#10;                        8d,&#10;                        1d,&#10;                        0d,}))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;3 4\n&quot; +&#10;                    &quot;1 1 2 9\n&quot; +&#10;                    &quot;0 1 3 1\n&quot; +&#10;                    &quot;0 0 6 0\n&quot; +&#10;                    &quot;0 0 0 0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;There are 4 rows, 3 columns, and no solutions&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    noSolutions))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;3 4\n&quot; +&#10;                    &quot;1 1 2 9\n&quot; +&#10;                    &quot;0 1 3 1\n&quot; +&#10;                    &quot;0 0 6 0\n&quot; +&#10;                    &quot;0 0 0 7&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;There are 4 rows, 3 columns, and infinite solutions&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    infiniteSolutions))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;3 4\n&quot; +&#10;                    &quot;1 1 2 9\n&quot; +&#10;                    &quot;0 1 3 1\n&quot; +&#10;                    &quot;0 2 6 2\n&quot; +&#10;                    &quot;0 0 0 0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;There are 3 rows, 4 columns, and no solutions&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    noSolutions))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;4 3\n&quot; +&#10;                    &quot;1 1 2 9 7\n&quot; +&#10;                    &quot;0 1 3 1 2\n&quot; +&#10;                    &quot;0 2 6 2 9&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;There are 3 rows, 4 columns, and infinite solutions&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    infiniteSolutions))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;4 3\n&quot; +&#10;                    &quot;1 1 2 9 7\n&quot; +&#10;                    &quot;0 1 3 1 2\n&quot; +&#10;                    &quot;0 2 6 3 9&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;There are 3 rows, 4 columns, and no solutions&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    noSolutions))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;4 3\n&quot; +&#10;                    &quot;1 0 0 0 1\n&quot; +&#10;                    &quot;0 0 0 0 0\n&quot; +&#10;                    &quot;1 0 0 0 0&quot;)&#10;&#10;        );&#10;    }&#10;&#10;    @Override&#10;    public CheckResult check(String reply, TestClue clue) {&#10;        try {&#10;            reply = readFile(clue.outFile);&#10;&#10;            if (reply.isEmpty()) {&#10;                return new CheckResult(false,&#10;                    &quot;File is empty or cannot be opened. &quot; +&#10;                        &quot;Did you close the file in your program?&quot;);&#10;            }&#10;&#10;            if (clue.answers == null) {&#10;                clue.answer = clue.answer.strip().toLowerCase();&#10;                reply = reply.strip().toLowerCase();&#10;                return new CheckResult(reply.equals(clue.answer), clue.feedback);&#10;            }&#10;&#10;            if (reply.equalsIgnoreCase(noSolutions) ||&#10;                reply.equalsIgnoreCase(infiniteSolutions)) {&#10;                return new CheckResult(false,&#10;                    &quot;There is a single solution but your program prints &quot; +&#10;                        &quot;\&quot;&quot; + reply + &quot;\&quot;&quot;);&#10;            }&#10;&#10;            double[] actual =&#10;                Arrays&#10;                    .stream(reply.split(&quot;\n&quot;))&#10;                    .map(String::strip)&#10;                    .mapToDouble(Double::parseDouble)&#10;                    .toArray();&#10;&#10;            double[] expected =&#10;                clue.answers.stream()&#10;                    .mapToDouble(e -&gt; e)&#10;                    .toArray();&#10;&#10;            if (actual.length != expected.length) {&#10;                return new CheckResult(false, clue.feedback);&#10;            }&#10;&#10;            for (int i = 0; i &lt; actual.length; i++) {&#10;                if (abs(actual[i] - expected[i]) &gt; 0.001) {&#10;                    return new CheckResult(false, clue.feedback);&#10;                }&#10;            }&#10;&#10;            return CheckResult.TRUE;&#10;        }&#10;        catch (NumberFormatException ex) {&#10;            return new CheckResult(false,&#10;                &quot;Numbers should be written in file on &quot; +&#10;                    &quot;separate lines without any additional symbols&quot;);&#10;        }&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/solver/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/solver/Main.java" />
                                <option name="text" value="package solver;&#10;&#10;import java.util.Scanner;&#10;&#10;&#10;public class Main {&#10;&#10;    public static void main(String[] args) {&#10;&#10;        LinearEquationSolver linearEquationSolver = new LinearEquationSolver();&#10;&#10;        Scanner scanner = new Scanner(System.in);&#10;&#10;        double a = scanner.nextDouble();&#10;        double b = scanner.nextDouble();&#10;        double c = scanner.nextDouble();&#10;        double d = scanner.nextDouble();&#10;        double e = scanner.nextDouble();&#10;        double f = scanner.nextDouble();&#10;&#10;        double y = linearEquationSolver.findY(a,b,c,d,e,f);&#10;        double x = linearEquationSolver.findX(a,b, c, y);&#10;        System.out.println(x +&quot; &quot; + y);&#10;    }&#10;}&#10;&#10;class LinearEquationSolver{&#10;&#10;    public double findY(double a, double b, double c, double d, double e, double f){&#10;        return (f - c *(d/a))/(e - b *(d/a));&#10;    }&#10;&#10;    public double findX(double a, double b, double c, double y){&#10;        return (c - (b*y))/a;&#10;    }&#10;&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/solver/in.txt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/solver/in.txt" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="output.txt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="output.txt" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="out.txt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="out.txt" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/solver/out.txt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/solver/out.txt" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/solver/Matrix.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/solver/Matrix.java" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/solver/Row.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/solver/Row.java" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/solver/swapcommand/Command.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/solver/swapcommand/Command.java" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/solver/swapcommand/SwapCommand.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/solver/swapcommand/SwapCommand.java" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/solver/LinearEquationSolver.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/solver/LinearEquationSolver.java" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/solver/swapcommand/SwapColumnsCommand.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/solver/swapcommand/SwapColumnsCommand.java" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/solver/swapcommand/SwapRowsAndColumnsCommand.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/solver/swapcommand/SwapRowsAndColumnsCommand.java" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1561924690000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;In this stage you should implement the ability to work with complex numbers. A set of complex numbers is wider set than a set of real numbers. You can look &lt;a href=&quot;https://www.mathsisfun.com/numbers/complex-numbers.html&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;here&lt;/a&gt; how to implement addition, subtraction, multiplication, and division in complex numbers.&lt;/p&gt;&#10;&#10;&lt;p&gt;You can read the complex number in the following way: a double number, then a plus or a minus, then another double number then a symbol &lt;code&gt;i&lt;/code&gt;. If there is no plus nor minus then the number has an imaginary part equal to zero. If there is no plus nor minus but the number ends with &lt;code&gt;i&lt;/code&gt;, then the number has a real part equal to zero. Also, if there is &lt;code&gt;1&lt;/code&gt; before &lt;code&gt;i&lt;/code&gt; like in &lt;code&gt;2+1i&lt;/code&gt; or &lt;code&gt;-1i&lt;/code&gt; then &lt;code&gt;1&lt;/code&gt; can be omitted like in &lt;code&gt;1+i&lt;/code&gt; and &lt;code&gt;-i&lt;/code&gt;.&lt;/p&gt;&#10;&#10;&lt;p&gt;Remember that you should write to file &lt;code&gt;No solutions&lt;/code&gt; or &lt;code&gt;Infinitely many solutions&lt;/code&gt; or the solution. Every variable of the solution should be on a separate line and there shouldn't be any spacebars (real part, plus/minus, imaginary part).&lt;/p&gt;&#10;&#10;&lt;p&gt;If a real part of a number is equal to zero you should write only an imaginary part and in case an imaginary part also equals zero then you should simply write &lt;code&gt;0&lt;/code&gt;. Also, if an imaginary part is equal to zero then write only a real part. If an imaginary part is equal to &lt;code&gt;1&lt;/code&gt; then write &lt;code&gt;i&lt;/code&gt; instead of &lt;code&gt;1i&lt;/code&gt;, like in the parsing examples above.&lt;/p&gt;&#10;&#10;&lt;h2&gt;Output example&lt;/h2&gt;&#10;&#10;&lt;p&gt;Suppose you have a file named in.txt. It contains the following. Note that the first line contains the number of rows and the number of columns.&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code&gt;3 3&#10;1+2i -1.5-1.1i 2.12 91+5i&#10;-1+3i 1.2+3.5i -3.3 1+15i&#10;12.31 1.3-5i 12.3i -78.3i&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;Below is how your program might work. The lines which start with &lt;code&gt;&amp;gt;&lt;/code&gt; represent the user input.&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code&gt;&amp;gt; java Solver -in in.txt -out out.txt&#10;Start solving the equation.&#10;Rows manipulation:&#10;R1 / 1+2i -&amp;gt; R1&#10;1-3i * R1 + R2 -&amp;gt; R2&#10;-12.31 * R1 + R3 -&amp;gt; R3&#10;R2 / 1.6+6.1i -&amp;gt; R2&#10;-10.40+9.67i * R2 + R3 -&amp;gt; R3&#10;R3 / -6.78+9.71i -&amp;gt; R3&#10;0.54-0.74i * R3 + R2 -&amp;gt; R2&#10;-0.42+0.84i * R3 + R1 -&amp;gt; R1&#10;0.74-0.38i * R2 + R1 -&amp;gt; R1&#10;The solution is: (6.73-22.99i, -1.79+2.0i, 15.6994+7.396i)&#10;Saved to file out.txt&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt; And the file &lt;code&gt;out.txt&lt;/code&gt; should look like this.  &lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;6.73-22.99i&#10;-1.79+2.0i&#10;15.6994+7.396i&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt; &lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/40/stages/213/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5309" />
                      <option name="index" value="5" />
                      <option name="name" value="Complex numbers" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="test/SolverTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/SolverTest.java" />
                                <option name="text" value="import org.hyperskill.hstest.v5.testcase.CheckResult;&#10;import org.hyperskill.hstest.v5.stage.BaseStageTest;&#10;import org.hyperskill.hstest.v5.testcase.TestCase;&#10;import solver.Main;&#10;&#10;import java.util.*;&#10;import java.text.DecimalFormat;&#10;import java.text.DecimalFormatSymbols;&#10;&#10;import static org.hyperskill.hstest.v5.common.Utils.readFile;&#10;&#10;&#10;class Complex {&#10;    public static final double EPSILON = 0.001;&#10;&#10;    public static Complex add(Complex a, Complex b) {&#10;        return new Complex(a.real + b.real, a.imag + b.imag);&#10;    }&#10;&#10;&#10;    public static Complex divide(Complex a, Complex b) {&#10;        final Complex bConjugate = b.conjugate();&#10;        final Complex a1 = Complex.multiply(a, bConjugate);&#10;        final Complex b1 = Complex.multiply(b, bConjugate);&#10;&#10;        return new Complex(a1.real / b1.real, a1.imag / b1.real);&#10;    }&#10;&#10;    public static Complex multiply(Complex a, Complex b) {&#10;        return new Complex(a.real * b.real - a.imag * b.imag, a.real * b.imag + a.imag * b.real);&#10;    }&#10;&#10;    final double real;&#10;    final double imag;&#10;&#10;    public Complex(double real, double imag) {&#10;        this.real = real;&#10;        this.imag = imag;&#10;    }&#10;&#10;    public Complex(String s) throws NumberFormatException {&#10;        final String[] strs = split(s);&#10;        System.out.println(strs[0] + &quot; &quot; + strs[1]);&#10;        if (strs[1].contains(&quot;i&quot;)) {&#10;            strs[1] = strs[1].replace(&quot;i&quot;, &quot;1&quot;);&#10;        }&#10;        if (strs[1].equals(&quot;-&quot;)) {&#10;            strs[1] = &quot;-1&quot;;&#10;        }&#10;        if (strs[1].equals(&quot;+&quot;)) {&#10;            strs[1] = &quot;1&quot;;&#10;        }&#10;        real = Double.parseDouble(strs[0]);&#10;        imag = Double.parseDouble(strs[1]);&#10;    }&#10;&#10;    public Complex conjugate() {&#10;        return new Complex(real, -imag);&#10;    }&#10;&#10;    public boolean equals(Object other) {&#10;        if (other == null) {&#10;            return false;&#10;        }&#10;&#10;        if (!(other instanceof Complex)) {&#10;            return false;&#10;        }&#10;&#10;        Complex o = (Complex) other;&#10;        return Math.abs(o.imag - imag) &lt; EPSILON &amp;&amp; Math.abs(o.real - real) &lt; EPSILON;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        final DecimalFormatSymbols symbols = new DecimalFormatSymbols(Locale.US);&#10;        final DecimalFormat realFormat = new DecimalFormat(&quot;0.####&quot;, symbols);&#10;        final DecimalFormat imagFormat = new DecimalFormat(&quot;0.####i&quot;, symbols);&#10;        if (Math.abs(imag) &lt; EPSILON) {&#10;            return realFormat.format(real);&#10;        }&#10;        if (Math.abs(real) &lt; EPSILON) {&#10;            return imagFormat.format(imag);&#10;        }&#10;        imagFormat.setPositivePrefix(&quot;+&quot;);&#10;        return String.format(&quot;%s%s&quot;, realFormat.format(real), imagFormat.format(imag));&#10;    }&#10;&#10;    private String[] split(String s) throws NumberFormatException {&#10;        if (s.equals(&quot;i&quot;)) {&#10;            return new String[]{&quot;0&quot;, &quot;1&quot;};&#10;        }&#10;        if (s.equals(&quot;-i&quot;)) {&#10;            return new String[]{&quot;0&quot;, &quot;-1&quot;};&#10;        }&#10;        String realString = &quot;0&quot;;&#10;        String imagString = &quot;0&quot;;&#10;        int i = 1;&#10;        for (; i &lt; s.length(); ++i) {&#10;            if (s.charAt(i) == '+' || s.charAt(i) == '-') {&#10;                realString = s.substring(0, i);&#10;                imagString = s.substring(i, s.length() - 1);&#10;                if (s.charAt(s.length()-1) != 'i') {&#10;                    throw new NumberFormatException(&quot;can't parse complex&quot;);&#10;                }&#10;                break;&#10;            }&#10;            if (s.charAt(i) == 'i') {&#10;                if (i != s.length() - 1) {&#10;                    throw  new NumberFormatException(&quot;can't parse complex&quot;);&#10;                }&#10;                imagString = s.substring(0, i);&#10;                break;&#10;            }&#10;        }&#10;        if (i == s.length()) {&#10;            realString = s;&#10;        }&#10;        if (imagString.length() == 0) {&#10;            imagString = &quot;1&quot;;&#10;        }&#10;        return new String[]{realString, imagString};&#10;    }&#10;}&#10;&#10;&#10;class TestClue {&#10;&#10;    String feedback;&#10;    String outFile;&#10;    ArrayList&lt;Complex&gt; complexAnswers;&#10;    String answer;&#10;&#10;    TestClue(String feedback, String outFile, Double[] answers) {&#10;        this(feedback, outFile,&#10;            Arrays&#10;            .stream(answers)&#10;            .map(e -&gt; new Complex(e, 0))&#10;            .toArray(Complex[]::new));&#10;    }&#10;&#10;    TestClue(String feedback, String outFile, String answer) {&#10;        this.feedback = feedback;&#10;        this.outFile = outFile;&#10;        this.answer = answer;&#10;    }&#10;&#10;    TestClue(String feedback, String outFile, Complex[] answers) {&#10;        this.feedback = feedback;&#10;        this.outFile = outFile;&#10;        this.complexAnswers = new ArrayList&lt;&gt;(Arrays.asList(answers));&#10;    }&#10;}&#10;&#10;&#10;public class SolverTest extends BaseStageTest&lt;TestClue&gt; {&#10;&#10;    public SolverTest() throws Exception {&#10;        super(Main.class);&#10;    }&#10;&#10;    static String noSolutions = &quot;No solutions&quot;;&#10;    static String infiniteSolutions = &quot;Infinitely many solutions&quot;;&#10;&#10;    @Override&#10;    public List&lt;TestCase&lt;TestClue&gt;&gt;  generate() {&#10;        return List.of(&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    new Double[]{1d, 2d, 3d}))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;3 3\n&quot; +&#10;                    &quot;1 1 2 9\n&quot; +&#10;                    &quot;2 4 -3 1\n&quot; +&#10;                    &quot;3 6 -5 0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    new Double[]{1d, 1d}))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;2 2\n&quot; +&#10;                    &quot;1 0 1\n&quot; +&#10;                    &quot;0 1 1&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Check if you process \&quot;-in\&quot; argument from command line&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    new Double[]{1d, 1d}))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;input.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;input.txt&quot;,&#10;                &quot;2 2\n&quot; +&#10;                    &quot;1 0 1\n&quot; +&#10;                    &quot;0 1 1&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Check if you process \&quot;-out\&quot; argument from command line&quot;,&#10;                    &quot;output.txt&quot;,&#10;                    new Double[]{1d, 1d}))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;output.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;2 2\n&quot; +&#10;                    &quot;1 0 1\n&quot; +&#10;                    &quot;0 1 1&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    new Double[]{2d, 2d}))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;2 2\n&quot; +&#10;                    &quot;1 0 2\n&quot; +&#10;                    &quot;0 1 2&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    new Double[]{1d, 1d}))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;2 2\n&quot; +&#10;                    &quot;2 0 2\n&quot; +&#10;                    &quot;0 2 2&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    new Double[]{-1d, 1d}))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;2 2\n&quot; +&#10;                    &quot;1 2 1\n&quot; +&#10;                    &quot;3 4 1&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;This test is a system of 20 linear equations&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    new Double[]{&#10;                        0.5428d,&#10;                        -2.3923d,&#10;                        1.5789d,&#10;                        -1.3679d,&#10;                        0.6433d,&#10;                        -1.7531d,&#10;                        -0.0432d,&#10;                        -0.7503d,&#10;                        -0.8245d,&#10;                        -0.4562d,&#10;                        -1.2163d,&#10;                        0.3093d,&#10;                        -0.1105d,&#10;                        1.1717d,&#10;                        -0.5873d,&#10;                        -1.3933d,&#10;                        1.1229d,&#10;                        3.0693d,&#10;                        1.1995d,&#10;                        1.5399}))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;20 20\n&quot; +&#10;                    &quot;26 90 17 67 68 9 60 38 37 38 76 14 33 94 88 58 99 84 9 45 18\n&quot; +&#10;                    &quot;37 34 20 53 10 61 75 49 91 84 55 84 84 81 30 22 42 76 33 27 2\n&quot; +&#10;                    &quot;99 69 63 57 39 45 33 43 99 26 25 24 80 91 62 90 54 77 88 32 94\n&quot; +&#10;                    &quot;37 40 14 5 47 30 5 21 36 77 57 38 29 3 61 12 81 19 39 56 9\n&quot; +&#10;                    &quot;36 73 71 39 9 9 31 10 84 7 13 45 9 34 2 14 88 43 17 4 86\n&quot; +&#10;                    &quot;31 29 76 89 26 35 11 55 37 5 41 96 19 18 100 20 21 49 83 5 20\n&quot; +&#10;                    &quot;18 18 25 70 79 74 30 66 41 93 63 2 90 4 46 1 77 89 21 47 52\n&quot; +&#10;                    &quot;32 62 27 80 57 10 35 44 97 18 58 19 5 81 33 54 83 66 25 75 75\n&quot; +&#10;                    &quot;56 53 13 91 30 11 72 52 13 86 73 88 94 20 25 77 90 75 73 52 36\n&quot; +&#10;                    &quot;63 9 40 40 35 90 55 92 12 98 34 37 64 21 67 91 15 65 82 87 30\n&quot; +&#10;                    &quot;71 5 65 64 6 20 9 81 40 56 39 93 74 55 83 81 74 2 58 86 58\n&quot; +&#10;                    &quot;13 50 31 86 73 36 83 27 37 96 37 28 75 91 15 78 90 56 57 18 18\n&quot; +&#10;                    &quot;34 9 51 11 92 54 25 91 61 69 37 37 89 91 95 50 10 16 69 71 66\n&quot; +&#10;                    &quot;25 16 79 36 6 28 51 100 5 28 97 23 44 32 50 2 96 18 5 48 44\n&quot; +&#10;                    &quot;80 38 47 96 41 72 85 79 2 3 96 14 2 65 97 38 76 73 88 59 89\n&quot; +&#10;                    &quot;31 98 88 52 49 68 46 79 26 30 31 76 84 87 27 16 66 55 78 2 46\n&quot; +&#10;                    &quot;57 2 32 78 70 7 95 56 77 97 49 14 74 7 85 48 83 59 71 5 44\n&quot; +&#10;                    &quot;4 64 4 43 54 99 77 7 72 82 27 22 29 94 53 48 65 88 26 86 42\n&quot; +&#10;                    &quot;69 59 62 63 42 29 73 18 82 78 48 60 84 73 84 9 82 53 14 1 12\n&quot; +&#10;                    &quot;98 2 47 62 69 11 28 14 83 32 94 24 71 1 16 91 53 50 38 26 17&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;This test is a system of 20 linear equations&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    new Double[]{&#10;                        0.2182d,&#10;                        0.3886d,&#10;                        0.2337d,&#10;                        0.5804d,&#10;                        -0.1867d,&#10;                        0.3536d,&#10;                        -0.5597d,&#10;                        -0.4706d,&#10;                        -0.3946d,&#10;                        -0.4577d,&#10;                        0.371d,&#10;                        -0.1959d,&#10;                        1.1403d,&#10;                        0.2808d,&#10;                        -0.8712d,&#10;                        -0.3355d,&#10;                        -0.1309d,&#10;                        -0.3008d,&#10;                        0.6355d,&#10;                        0.4716d}))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;20 20\n&quot; +&#10;                    &quot;0.11 0.62 0.28 0.94 0.53 0.94 0.06 1.0 0.61 0.45 0.03 0.79 0.87 0.32 0.66 0.5 0.14 0.82 0.44 0.13 0.43\n&quot; +&#10;                    &quot;0.8 0.7 0.16 0.09 0.4 0.63 0.46 1.0 0.9 0.14 0.03 0.8 0.98 0.71 0.67 0.42 0.73 0.01 0.75 0.59 0.64\n&quot; +&#10;                    &quot;0.99 0.01 0.45 0.85 0.17 0.14 0.58 0.27 0.96 0.52 0.74 0.89 0.72 0.93 0.22 0.9 0.41 0.78 0.56 0.67 0.84\n&quot; +&#10;                    &quot;0.19 0.35 0.98 0.28 0.74 0.42 0.82 0.51 0.33 0.84 0.85 0.46 0.71 0.93 0.11 0.88 0.08 0.72 0.68 0.73 0.82\n&quot; +&#10;                    &quot;0.59 0.52 0.17 0.62 0.9 0.66 0.23 0.47 0.29 0.78 0.43 0.99 0.67 0.63 0.38 0.85 0.72 0.6 0.97 0.75 0.96\n&quot; +&#10;                    &quot;0.66 0.24 0.9 0.43 0.39 0.31 0.64 0.17 0.75 0.62 0.38 0.38 0.41 0.38 0.41 0.9 0.29 0.21 0.54 0.87 0.35\n&quot; +&#10;                    &quot;0.06 0.57 0.04 0.74 0.27 0.75 0.0 0.52 0.42 0.85 0.35 0.19 0.57 0.42 0.93 0.77 0.09 0.4 0.83 0.39 0.46\n&quot; +&#10;                    &quot;0.87 0.77 0.71 0.61 0.73 0.28 0.02 0.96 0.29 0.37 0.27 0.43 0.02 0.82 0.16 0.34 0.49 0.9 0.35 0.11 0.18\n&quot; +&#10;                    &quot;0.87 0.7 0.4 0.27 0.35 0.57 0.36 0.89 0.09 0.78 0.64 0.84 0.06 0.69 0.41 0.4 0.64 0.55 0.81 0.69 0.27\n&quot; +&#10;                    &quot;0.34 0.49 0.27 1.0 0.78 0.01 0.58 0.87 0.47 0.27 0.23 0.35 0.55 0.06 0.67 0.74 0.17 0.68 0.75 0.76 0.16\n&quot; +&#10;                    &quot;0.38 0.71 0.29 0.94 0.84 0.46 0.98 0.0 0.89 0.58 0.09 0.04 0.04 0.66 0.21 0.58 0.8 0.96 0.78 0.67 0.11\n&quot; +&#10;                    &quot;0.36 0.37 0.1 0.36 0.46 0.15 0.99 0.38 0.39 0.52 0.76 0.68 0.94 0.31 0.21 0.99 0.78 0.17 0.15 0.06 0.06\n&quot; +&#10;                    &quot;0.94 0.3 0.35 0.24 0.79 0.86 0.7 0.81 0.2 0.23 0.52 0.91 0.55 0.21 0.47 0.44 0.1 0.97 0.61 0.13 0.03\n&quot; +&#10;                    &quot;0.03 0.28 0.32 0.06 0.54 0.08 1.0 0.69 0.29 0.48 0.84 0.37 0.74 0.13 0.2 0.75 0.46 0.03 0.68 0.72 0.33\n&quot; +&#10;                    &quot;0.43 0.78 0.69 0.91 0.8 0.68 0.46 0.9 0.65 0.19 0.81 0.28 0.3 0.75 0.94 0.05 0.65 0.29 0.61 0.74 0.68\n&quot; +&#10;                    &quot;0.01 0.46 0.38 0.72 0.97 0.39 0.88 0.62 0.93 0.26 0.58 0.02 0.95 0.49 0.69 0.64 0.47 0.53 0.43 0.1 0.09\n&quot; +&#10;                    &quot;0.83 0.72 0.84 0.41 0.53 0.53 0.67 0.09 0.49 0.42 0.88 0.14 0.09 0.02 0.49 0.29 0.29 0.17 0.08 0.9 0.45\n&quot; +&#10;                    &quot;0.54 0.57 0.53 0.23 0.78 0.89 0.24 0.98 0.7 0.75 0.46 0.85 0.39 0.58 0.36 0.29 0.54 0.83 0.97 0.62 0.34\n&quot; +&#10;                    &quot;0.3 0.64 0.71 0.07 0.03 0.76 0.25 0.34 0.97 0.93 0.48 0.57 0.98 0.33 0.4 0.18 0.01 0.81 0.38 0.87 0.95\n&quot; +&#10;                    &quot;0.25 0.7 0.07 0.4 0.67 0.84 0.12 0.43 0.61 0.7 0.89 0.88 0.48 0.14 0.32 0.98 0.15 0.87 0.34 0.81 0.37&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Check is the first element is zero&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    new Double[]{1d, 1d}))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;2 2\n&quot; +&#10;                    &quot;0 1 1\n&quot; +&#10;                    &quot;1 0 1&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    new Double[]{2d, 1d}))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;2 2\n&quot; +&#10;                    &quot;0 1 1\n&quot; +&#10;                    &quot;1 0 2&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    new Double[]{&#10;                        -0.5175d,&#10;                        -0.1523d,&#10;                        0.7669d,&#10;                        2.0115d,&#10;                        0.0958d,&#10;                        0.2849d,}))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;6 6\n&quot; +&#10;                    &quot;2 6 1 3 9 1 6\n&quot; +&#10;                    &quot;9 2 4 3 6 1 5\n&quot; +&#10;                    &quot;6 5 9 1 4 2 6\n&quot; +&#10;                    &quot;4 1 1 2 9 2 4\n&quot; +&#10;                    &quot;5 4 6 2 3 1 6\n&quot; +&#10;                    &quot;3 5 4 1 7 9 6&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    new Double[]{&#10;                        0.241,&#10;                        0.5984,&#10;                        0.2851,&#10;                        0.1325,&#10;                        0.1446,&#10;                        0.4257,}))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;6 6\n&quot; +&#10;                    &quot;0 6 1 3 9 1 6\n&quot; +&#10;                    &quot;9 0 4 3 6 1 5\n&quot; +&#10;                    &quot;6 5 0 1 4 2 6\n&quot; +&#10;                    &quot;4 1 1 0 9 2 4\n&quot; +&#10;                    &quot;5 4 6 2 0 1 6\n&quot; +&#10;                    &quot;3 5 4 1 7 0 6&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    new Double[]{&#10;                        -65.8154,&#10;                        13.0615,&#10;                        -4.4,&#10;                        2.6154,&#10;                        -0.9231,&#10;                        3.5385,}))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;6 6\n&quot; +&#10;                    &quot;1 6 1 1 9 1 6\n&quot; +&#10;                    &quot;0 1 4 3 2 1 5\n&quot; +&#10;                    &quot;0 0 0 1 4 2 6\n&quot; +&#10;                    &quot;0 0 0 2 9 2 4\n&quot; +&#10;                    &quot;0 0 0 2 3 1 6\n&quot; +&#10;                    &quot;0 0 5 1 7 9 6&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    new Double[]{&#10;                        -50.381,&#10;                        10.6508,&#10;                        -2.0794,&#10;                        0.5556,&#10;                        -1d,&#10;                        3d,}))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;6 6\n&quot; +&#10;                    &quot;1 6 1 1 9 1 6\n&quot; +&#10;                    &quot;0 1 4 3 2 1 5\n&quot; +&#10;                    &quot;0 0 0 0 0 2 6\n&quot; +&#10;                    &quot;0 0 0 0 2 2 4\n&quot; +&#10;                    &quot;0 0 0 9 2 1 6\n&quot; +&#10;                    &quot;0 0 7 1 7 9 6&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Test exactly like in the example&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    noSolutions))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;3 4\n&quot; +&#10;                    &quot;0 1 2 9\n&quot; +&#10;                    &quot;0 1 3 1\n&quot; +&#10;                    &quot;1 0 6 0\n&quot; +&#10;                    &quot;2 0 2 0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;There are 4 rows, 3 columns, and a single solution&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    new Double[]{&#10;                        8d,&#10;                        1d,&#10;                        0d,}))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;3 4\n&quot; +&#10;                    &quot;1 1 2 9\n&quot; +&#10;                    &quot;0 1 3 1\n&quot; +&#10;                    &quot;0 0 6 0\n&quot; +&#10;                    &quot;0 0 0 0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;There are 4 rows, 3 columns, and no solutions&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    noSolutions))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;3 4\n&quot; +&#10;                    &quot;1 1 2 9\n&quot; +&#10;                    &quot;0 1 3 1\n&quot; +&#10;                    &quot;0 0 6 0\n&quot; +&#10;                    &quot;0 0 0 7&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;There are 4 rows, 3 columns, and infinite solutions&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    infiniteSolutions))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;3 4\n&quot; +&#10;                    &quot;1 1 2 9\n&quot; +&#10;                    &quot;0 1 3 1\n&quot; +&#10;                    &quot;0 2 6 2\n&quot; +&#10;                    &quot;0 0 0 0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;There are 3 rows, 4 columns, and no solutions&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    noSolutions))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;4 3\n&quot; +&#10;                    &quot;1 1 2 9 7\n&quot; +&#10;                    &quot;0 1 3 1 2\n&quot; +&#10;                    &quot;0 2 6 2 9&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;There are 3 rows, 4 columns, and infinite solutions&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    infiniteSolutions))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;4 3\n&quot; +&#10;                    &quot;1 1 2 9 7\n&quot; +&#10;                    &quot;0 1 3 1 2\n&quot; +&#10;                    &quot;0 2 6 3 9&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;There are 3 rows, 4 columns, and no solutions&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    noSolutions))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;4 3\n&quot; +&#10;                    &quot;1 0 0 0 1\n&quot; +&#10;                    &quot;0 0 0 0 0\n&quot; +&#10;                    &quot;1 0 0 0 0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;This is the first test with complex numbers. &quot; +&#10;                        &quot;Maybe output format is wrong?&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    new Complex[]{&#10;                        new Complex(0, -1),&#10;                        new Complex(0, -1),&#10;                    }))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;2 2\n&quot; +&#10;                    &quot;i 0 1\n&quot; +&#10;                    &quot;0 i 1&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;This test is about complex numbers&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    noSolutions))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;2 2\n&quot; +&#10;                    &quot;i -i i\n&quot; +&#10;                    &quot;-i i i&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;This test is about complex numbers&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    infiniteSolutions))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;2 2\n&quot; +&#10;                    &quot;i -i i\n&quot; +&#10;                    &quot;-i i -i&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;This test is about complex numbers&quot;,&#10;                    &quot;out.txt&quot;,&#10;                    new Complex[]{&#10;                        new Complex(-0.0879, 0.1686),&#10;                        new Complex(-0.0707, -0.0877),&#10;                        new Complex(0.6987, 0.8726),&#10;                    }))&#10;                .addArguments(new String[]{&quot;-in&quot;, &quot;in.txt&quot;, &quot;-out&quot;, &quot;out.txt&quot;})&#10;                .addFile(&quot;in.txt&quot;,&#10;                &quot;3 3\n&quot; +&#10;                    &quot;1+i 2+6i 7-8i 12\n&quot; +&#10;                    &quot;-7i 123 12+i i\n&quot; +&#10;                    &quot;11-11i 12+i -i 1+i&quot;)&#10;&#10;        );&#10;    }&#10;&#10;    @Override&#10;    public CheckResult check(String reply, TestClue clue) {&#10;        try {&#10;            reply = readFile(clue.outFile);&#10;&#10;            if (reply.isEmpty()) {&#10;                return new CheckResult(false,&#10;                    &quot;File is empty or cannot be opened. &quot; +&#10;                        &quot;Did you close the file in your program?&quot;);&#10;            }&#10;&#10;            if (clue.complexAnswers == null) {&#10;                reply = reply.strip().toLowerCase();&#10;                clue.answer = clue.answer.strip().toLowerCase();&#10;                return new CheckResult(reply.equals(clue.answer), clue.feedback);&#10;            }&#10;&#10;            if (reply.strip().toLowerCase().equals(noSolutions) ||&#10;                reply.strip().toLowerCase().equals(infiniteSolutions)) {&#10;                return new CheckResult(false,&#10;                    &quot;There is a single solution but your program prints &quot; +&#10;                        &quot;\&quot;&quot; + reply + &quot;\&quot;&quot;);&#10;            }&#10;&#10;            Complex[] actual =&#10;                Arrays&#10;                    .stream(reply.split(&quot;\n&quot;))&#10;                    .map(String::strip)&#10;                    .map(Complex::new)&#10;                    .toArray(Complex[]::new);&#10;&#10;            Complex[] expected =&#10;                clue.complexAnswers.toArray(Complex[]::new);&#10;&#10;            if (actual.length != expected.length) {&#10;                return new CheckResult(false, clue.feedback);&#10;            }&#10;&#10;            for (int i = 0; i &lt; actual.length; i++) {&#10;                if (!actual[i].equals(expected[i])) {&#10;                    return new CheckResult(false, clue.feedback);&#10;                }&#10;            }&#10;&#10;            return CheckResult.TRUE;&#10;        }&#10;        catch (NumberFormatException ex) {&#10;            return new CheckResult(false,&#10;                &quot;Numbers should be written in file on &quot; +&#10;                    &quot;separate lines without any additional symbols&quot;);&#10;        }&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/solver/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/solver/Main.java" />
                                <option name="text" value="package solver;&#10;&#10;import java.util.Scanner;&#10;&#10;&#10;public class Main {&#10;&#10;    public static void main(String[] args) {&#10;&#10;        LinearEquationSolver linearEquationSolver = new LinearEquationSolver();&#10;&#10;        Scanner scanner = new Scanner(System.in);&#10;&#10;        double a = scanner.nextDouble();&#10;        double b = scanner.nextDouble();&#10;        double c = scanner.nextDouble();&#10;        double d = scanner.nextDouble();&#10;        double e = scanner.nextDouble();&#10;        double f = scanner.nextDouble();&#10;&#10;        double y = linearEquationSolver.findY(a,b,c,d,e,f);&#10;        double x = linearEquationSolver.findX(a,b, c, y);&#10;        System.out.println(x +&quot; &quot; + y);&#10;    }&#10;}&#10;&#10;class LinearEquationSolver{&#10;&#10;    public double findY(double a, double b, double c, double d, double e, double f){&#10;        return (f - c *(d/a))/(e - b *(d/a));&#10;    }&#10;&#10;    public double findX(double a, double b, double c, double y){&#10;        return (c - (b*y))/a;&#10;    }&#10;&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1561924691000" />
                    </EduTask>
                  </list>
                </option>
              </FrameworkLesson>
            </list>
          </option>
        </HyperskillCourse>
      </option>
    </StudyTaskManager>
  </component>
</project>